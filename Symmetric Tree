/*****************************************************

    Following is the Binary Tree node structure:
    
    class BinaryTreeNode {
        public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
        
        ~BinaryTreeNode() {
            if(left) 
                delete left;
            if(right) 
                delete right;
        }
    };

******************************************************/
bool isMirror(BinaryTreeNode<int>* root1, BinaryTreeNode<int>* root2){
    if(root1 == NULL && root2 == NULL)
        return true;
    else if(root1 == NULL || root2 == NULL)
        return false;
    
    bool cond1 = root1->data == root2->data;
    bool cond2 = isMirror(root1->left, root2->right);
    bool cond3 = isMirror(root1->right, root2->left);
    
    return (cond1 && cond2 && cond3);
}

bool isSymmetric(BinaryTreeNode<int>* root)
{
    // Write your code here. 
    if(root == NULL)
        return true;
    if(root->left == NULL && root->right == NULL)
        return true;
    else if(root->left == NULL || root->right == NULL)
        return false;
    
    BinaryTreeNode<int>* root1 = root->left;
    BinaryTreeNode<int>* root2 = root->right;
    
    return isMirror(root1, root2);
}
